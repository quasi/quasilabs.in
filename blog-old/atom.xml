<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[quasiTech]]></title>
  <link href="http://quasi.github.io/atom.xml" rel="self"/>
  <link href="http://quasi.github.io/"/>
  <updated>2014-02-05T19:27:34+05:30</updated>
  <id>http://quasi.github.io/</id>
  <author>
    <name><![CDATA[Abhijit Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting with Common Lisp]]></title>
    <link href="http://quasi.github.io/2014/02/05/starting-with-common-lisp/"/>
    <updated>2014-02-05T15:50:00+05:30</updated>
    <id>http://quasi.github.io/2014/02/05/starting-with-common-lisp</id>
    <content type="html"><![CDATA[<p>Learning a new programming language requires you to interact with its runtime. But the bare bones runtime is usually just that &ndash; bare. It generally is an unpleasant task to interact with directly. This is nowhere more true then when learning to program in Lisp. But the good news is that the tools of the Lisp environment are evolved and provide a lot of support to make interaction less unpleasent. It is therefore imperative that we use these tools and setup an ideal environment before we start with the lessons.</p>

<p>Today we will setup, <em>from scratch</em>, a <em>Common Lisp</em> development environment. This will include an editor, an interactive development environment, a structured editing mode and an implementation of Common Lisp.</p>

<p><em>Note : please change the paths in the examples to reflect your system</em></p>

<h4>Common Lisp</h4>

<p>We will need an implemntation of Common Lisp. There are <a href="http://cliki.net/Common%20Lisp%20implementation">several</a> free and commercial ones available. We will use the excellent public domain <a href="http://www.sbcl.org">Steel Bank Common Lisp (SBCL)</a> for this tutorial.</p>

<blockquote><p>Steel Bank Common Lisp (SBCL) is a high performance Common Lisp compiler. It is open source / free software, with a permissive license. In addition to the compiler and runtime system for ANSI Common Lisp, it provides an interactive environment including a debugger, a statistical profiler, a code coverage tool, and many other extensions.</p></blockquote>

<p>Let us select the Darwin (Mac OS X) AMD64 port from the <a href="http://www.sbcl.org/platform-table.html">downloads</a> section and download (&lt; 10 Mb).</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://prdownloads.sourceforge.net/sbcl/sbcl-1.1.8-x86-64-darwin-binary.tar.bz2</span></code></pre></td></tr></table></div></figure>


<p>Extract the archive</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>tar xjvf sbcl-1.1.8-x86-64-darwin-binary.tar.bz2</span></code></pre></td></tr></table></div></figure>


<p>Change to the extracted folder</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd sbcl-1.1.8-x86-64-darwin</span></code></pre></td></tr></table></div></figure>


<p>The <em>INSTALL</em> file details the installation instructions. I prefer to install in my home folder. Create a folder to contain all the <em>SBCL</em> files. Run the install script specifying the installation folder of our choice.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /Users/me/sbcl
</span><span class='line'>
</span><span class='line'>INSTALL_ROOT=/Users/me/sbcl sh install.sh</span></code></pre></td></tr></table></div></figure>


<p>This will install all the files into <code>/Users/me/sbcl</code>. <em>SBCL</em> contains an executable and a core file. The executable &ndash; usually named <code>sbcl</code> &ndash; looks for an environment variable <code>SBCL_HOME</code> to locate the core file. We also need to set the locale. I have a shell script in my local bin which does all this.</p>

<p>Create a file <code>~/bin/sbcl</code> and add following to it :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>LC_CTYPE=en_US.UTF-8
</span><span class='line'>export LC_CTYPE
</span><span class='line'>export SBCL_HOME=/Users/me/sbcl/lib/sbcl/
</span><span class='line'>
</span><span class='line'>/Users/me/sbcl/bin/sbcl $*</span></code></pre></td></tr></table></div></figure>


<p>Make this file executable</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod +x ~/bin/sbcl</span></code></pre></td></tr></table></div></figure>


<p>now typing <code>sbcl</code> into your shell prompt should start up <em>SBCL</em> and show something like below</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>This is SBCL 1.1.10, an implementation of ANSI Common Lisp.
</span><span class='line'>More information about SBCL is available at &lt;http://www.sbcl.org/&gt;.
</span><span class='line'>
</span><span class='line'>SBCL is free software, provided as is, with absolutely no warranty.
</span><span class='line'>It is mostly in the public domain; some portions are provided under
</span><span class='line'>BSD-style licenses.  See the CREDITS and COPYING files in the
</span><span class='line'>distribution for more information.
</span><span class='line'>*</span></code></pre></td></tr></table></div></figure>


<p>You can type s-expressions at the <code>*</code> prompt and the lisp will evaluate and return you an answer. For example.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* (+ 2 3)
</span><span class='line'>
</span><span class='line'>5
</span><span class='line'>*</span></code></pre></td></tr></table></div></figure>


<p>Congrats !! We have an installed and running <em>Common Lisp</em> ! Now let&rsquo;s move forward.</p>

<h4>Quicklisp !</h4>

<p><a href="http://www.quicklisp.org/beta/">http://www.quicklisp.org/beta/</a> by Zach Beane</p>

<blockquote><p>Quicklisp is a library manager for Common Lisp. It works with your existing Common Lisp implementation to download, install, and load any of over 900 libraries with a few simple commands.</p></blockquote>

<p>Read through the installation instructions from that site. In short we will have to :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ curl -O http://beta.quicklisp.org/quicklisp.lisp</span></code></pre></td></tr></table></div></figure>


<p>Start <em>SBCL</em> with this file :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sbcl --load quicklisp.lisp</span></code></pre></td></tr></table></div></figure>


<p>At the prompt follow the instructions &ndash; type following :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* (quicklisp-quickstart:install)</span></code></pre></td></tr></table></div></figure>


<p>This will download and install the latest <em>quicklisp</em> software. To add the <em>quicklisp</em> to the <em>SBCL</em> startup file :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(ql:add-to-init-file)</span></code></pre></td></tr></table></div></figure>


<p>Now everytime you start <em>SBCL</em> it will load <em>quicklisp</em> automatically. yey!</p>

<p>To install a library you simply have to :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>* (ql:quickload "libraryname")</span></code></pre></td></tr></table></div></figure>


<p>Now the we need to install a <em>very</em> important package called <a href="http://www.common-lisp.net/project/slime/">SLIME</a>. This is the software which gives us our interactive development environment <em>(like no other)</em> !</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(ql:quickload "quicklisp-slime-helper")</span></code></pre></td></tr></table></div></figure>


<p>Note the instructions which follow this &ndash; you will need to use them for your editor configuration. Next topic.</p>

<h4>Editor</h4>

<blockquote><p>GNU Emacs is an extensible, customizable text editor—and more. At its core is an interpreter for Emacs Lisp, a dialect of the Lisp programming language with extensions to support text editing.</p></blockquote>

<p>Emacs is the editor of choice for Lisp programmers. It provides fantastic support for programming in various lisps. There are <a href="http://www.emacswiki.org/emacs/CategoryPorts">a lot of</a> flavours available for a lot of different systems. On GNU/Linux systems, the latest emacs can be installed using the system package manager. I use <a href="http://aquamacs.org">Aquamacs</a> on Mac OS X. Please install your Emacs before moving to the next step.</p>

<h4>Configuring Emacs</h4>

<p>Create a <code>.emacs</code> file in your home. This file is the Emacs startup file and can contain any valid elisp. All options can be configured here. By convention a folder <code>~/.emacs.d</code> is usually used for any misc elisp files, packages etc. which we may need to install manually.</p>

<p>Emacs comes with a package manager. This can automagically install packages and their dependencies. I like all the installed packages to reside inside a folder <code>.emacs.d/elpa</code>. Create this folder.  To set it up, add the following to your .emacs. (note : <code>;</code> start a comment in lisp source files)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(require 'package)
</span><span class='line'>(add-to-list 'package-archives
</span><span class='line'>             '("melpa" . "http://melpa.milkbox.net/packages/") t)
</span><span class='line'>(setq package-user-dir "/Users/me/.emacs.d/elpa/") ;; change the path.
</span><span class='line'>(package-initialize)</span></code></pre></td></tr></table></div></figure>


<p>Now <code>M-x package-install &lt;package-name&gt;</code> will download and install the package.</p>

<h5>SLIME</h5>

<blockquote><p>SLIME is a Emacs mode for Common Lisp development.</p></blockquote>

<p>Configuring <em>SLIME</em> : Add the following to your .emacs</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>(setq inferior-lisp-program "~/bin/sbcl")
</span><span class='line'>(load (expand-file-name "~/quicklisp/slime-helper.el"))
</span><span class='line'>
</span><span class='line'>(setq slime-lisp-implementations
</span><span class='line'>           '((sbcl ("~/bin/sbcl") :coding-system utf-8-unix)))
</span><span class='line'>
</span><span class='line'>(set-language-environment "UTF-8")
</span><span class='line'>(setq slime-net-coding-system 'utf-8-unix)
</span></code></pre></td></tr></table></div></figure>


<p>This basically tells Emacs where to find the lisp (called <em>inferior-lisp</em>) program. Then we load the <em>slime-helper</em> which <em>quicklisp</em> provides.</p>

<p><code>M-x eval-buffer</code> will read your new changes. <code>M-x slime</code> should start <em>SLIME</em> and present you with a nice <em>REPL</em>. At the <em>REPL</em> <code>,q</code> will quit <em>SLIME</em>.</p>

<h5>PAREDIT</h5>

<blockquote><p>ParEdit (paredit.el) is a minor mode for performing structured editing of S-expression data.</p></blockquote>

<p><code>M-x package-install paredit</code> should download and install it.</p>

<p>To setup <em>paredit</em> and to get it to work with <em>SLIME</em>, add following to <code>.emacs</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>;; Paredit customizations
</span><span class='line'>(autoload 'paredit-mode "paredit"
</span><span class='line'>  "Minor mode for pseudo-structurally editing Lisp code."
</span><span class='line'>  t)
</span><span class='line'>(add-hook 'slime-mode-hook (lambda () (paredit-mode +1)))
</span><span class='line'>(add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
</span><span class='line'>(require 'paredit)</span></code></pre></td></tr></table></div></figure>


<h4>Almost there</h4>

<p>At this point of time we have an installed and running Common Lisp implementation, an advanced editor, an interactive development environment &amp; a structured editing extention for the editor. This is the place to spend some time to see how all of these work.</p>

<ul>
<li>Inside Emacs <code>C-h t</code> starts the inbuilt interactive tutorial</li>
<li>Emacs introductory videos <a href="http://emacsrocks.com/">http://emacsrocks.com/</a></li>
<li><a href="http://common-lisp.net/project/movies/movies/slime.mov">SLIME video</a> &ndash; This is an excellent and instructional watch. Marco Baringer shows how it is done. Consider this also as informal introduction to SLIME</li>
<li>SLIME <a href="http://www.common-lisp.net/project/slime/doc/html/">manual</a></li>
<li>Paredit Author&rsquo;s <a href="http://mumble.net/~campbell/emacs/paredit.html">page</a></li>
<li>Paredit Emacs Wiki <a href="http://www.emacswiki.org/emacs/ParEdit">page</a></li>
</ul>


<h4>Epilogue : Learning Common Lisp</h4>

<p>Now that we have got all the boring setup stuff out of the way, let us <em>start</em> with Common Lisp !! <a href="http://www.gigamonkeys.com/book/">Practical Common Lisp</a> is an excellent modern introduction and you can start here.</p>

<p>I am assuming that as you have come this far, you <em>are</em> interested in learning. I would suggest that you do exactly so &ndash; <em>learn</em>. Give it some time and thought before you come to any conclusions. This is very important for people who are coming from a non-lisp programming background. The lisp way is different. It may take time for you to <em>get</em> it. Concentrate on the simpler language aspects and try to solve challenging programming problems. Stay away from the temptation of exploring libraries and doing some <em>&lsquo;real&rsquo;</em> work at this point. You will only get distracted with unnecessary detail.</p>

<p>Best Luck on your journey &ndash; You will not regret it.</p>

<p><em>May the force be with you.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How I came to Lisp]]></title>
    <link href="http://quasi.github.io/2014/01/15/how-I-came-to-lisp/"/>
    <updated>2014-01-15T14:18:00+05:30</updated>
    <id>http://quasi.github.io/2014/01/15/how-I-came-to-lisp</id>
    <content type="html"><![CDATA[<blockquote class="twitter-tweet" lang="en"><p>This is the decade of <a href="https://twitter.com/search?q=%23Lisp&amp;src=hash">#Lisp</a>. Mind it.</p>&mdash; Abhijit Rao (@_quasi) <a href="https://twitter.com/_quasi/statuses/365851774499815425">August 9, 2013</a></blockquote>


<script async src="http://quasi.github.io//platform.twitter.com/widgets.js" charset="utf-8"></script>


<p>People have asked me why I chose to program in Lisp.</p>

<h3>Early days</h3>

<p>Long back (1995-6) when I was still a college student (studying Math) I first saw Prolog. Chirs Martis, then boyfriend (now husband) of my friend Medha Patkar used to work for some company in SEEPZ and he was working on a project for some Japanese company. They had to migrate an older code base to a newer stack. I disremember the details (I dont think I knew much anyway) but he was learning Prolog as they were using a translater written in Prolog to help in the translation of the older codebase. I was a curious cuss then, and kept pestering him with questions. I was interested and wanted to learn Prolog. This was before we had access to the Internet. So my friend Anuprita took me to the British Council Library where she was a member. I saw a couple of Prolog books &ndash; pretty hard for me to understand as I had scant background in Programming (I did not even own a computer at that time). But I also saw a tiny booklet about another language called Lisp written by some Indian author. What intrigued me was the factorial program on the last page &ndash; this did not look like any program I had ever seen. I was more interested.</p>

<p>Fast forward to 1998. I tried using <a href="http://www.cons.org/cmucl/">CMUCL</a> on my AMD 386DX with 8 MB of RAM.  It was very hard to understand what to do at the REPL. Hardly any documentation.  Fast forward somewhere 2001 and Internet world. I landed up on comp.lang.lisp and asked a few silly questions. Got my head bitten off seriously &ndash; especially by Naggum. But <a href="http://xach.com/naggum/articles/">Erik Naggum</a>, and <a href="http://www.flownet.com/">Erann Gatt (Ron Garret)</a> were the reason I persisted. Erann(Ron) by his <a href="http://www.flownet.com/gat/jpl-lisp.html">Nasa stories</a> really awed me. By this time I had also come across <a href="http://en.wikipedia.org/wiki/Greenspun%27s_Tenth_Rule">Greenspun&rsquo;s tenth rule</a> of programming&hellip;</p>

<p><img src="http://quasi.in/old-homepage/surreal/images/rmsandme.jpg" alt="RMS and me" /></p>

<p>By this time I was a super fan of <a href="http://stallman.org/">RMS</a>. He wrote <a href="http://www.gnu.org/software/emacs/">Emacs</a>. In <a href="http://en.wikipedia.org/wiki/Emacs_Lisp">lisp</a>. WOW.</p>

<p>Soon, 2003, I wrote a software for a cable ISP service provider in Bandra East. I tried <a href="http://www.cons.org/cmucl/">CMUCL</a> again. This time with Emacs. I had an upgraded machine &ndash; Pentium MMX 200MHz with 32 MB or RAM. Those were the days when internet was provided by small players who provided Cable TV. This software did everything from user management to enabling / disabling users to keeping track of their usage. I used the GNU/Linux &lsquo;tc&rsquo; tool to do the traffic shaping. I wrote everything including a jazzy web-frontend in <a href="http://www.cons.org/cmucl/">CMUCL</a>. It ran very stably.</p>

<p>All this time I was a <a href="http://en.wikipedia.org/wiki/Common_Lisp">Common Lisp</a> noob. But still I loved the simplicity of the syntax and the expressibility. There was also a sense that I was just touching the surface and I needed to find the horizon. From 1995 to this time I had learned programming in C and had done some low level stuff in Dos 6.22 and GNU/Linux. I had finished my Post Graduate Diploma in Networking from the National Center of Software Technology. I had done a bit of network programming. I loved to program in C. But I loved CL too.</p>

<p>So the reasons I persisted and learned programming in Common Lisp are many, mostly incidental. But there was also a sense that this was something beyond the ordinary &ndash; it was elegant. There was also some kind of respect for it as few of the greatest minds of this field had used it and respected it.</p>

<p>I had to explore. I had to learn.</p>

<p>next post &ndash; how I used Common Lisp at <a href="http://www.cleartrip.com/">Cleartrip</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Emacs and JS: Finding function definitions]]></title>
    <link href="http://quasi.github.io/2014/01/06/emacs-and-js-finding-function-definitions/"/>
    <updated>2014-01-06T17:31:00+05:30</updated>
    <id>http://quasi.github.io/2014/01/06/emacs-and-js-finding-function-definitions</id>
    <content type="html"><![CDATA[<p>I started doing Javascript recently. The <code>js2-mode</code> is excellent. But I am spoilt by <code>SLIME</code> :). One of the things I most missed from there was to be able to lookup function definitions with <code>M-.</code> and to get back with <code>M-,</code>. I had been pair programming with a team-mate and editing a 1000 line file and in his vanilla &lsquo;Sublime&rsquo; editor and it was a royal pain scrolling all over the place looking for function definitions.  So I decided to try my hand at some elisp. This was the first time but I really felt the need.</p>

<p>This is pretty simple really :</p>

<ul>
<li>Get the word at point</li>
<li>Prepend &ldquo;function &rdquo; to it</li>
<li>Save current location on a stack to getting back</li>
<li>Go to top of buffer</li>
<li>Do a forward search with our search string</li>
<li>If successful center line</li>
<li>Else do nothing and show message.</li>
</ul>


<p>Another function, bound to <code>M-,</code> pops a position off the stack and goes to it.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Find JS function definition in your current buffer (and go back).</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="vg">*quasi-js-current-pos*</span> <span class="no">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">quasi-js-function-search</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Search for JS function definations. In a rather dumb way, but works, albeit</span>
</span><span class='line'><span class="s">only for current buffer. Works recurcively too :)&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">text</span> <span class="p">(</span><span class="nv">thing-at-point</span> <span class="ss">&#39;word</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">push</span> <span class="p">(</span><span class="nv">point</span><span class="p">)</span> <span class="vg">*quasi-js-current-pos*</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">search-forward</span> <span class="p">(</span><span class="nv">concat</span> <span class="s">&quot;function &quot;</span> <span class="nv">text</span><span class="p">)</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">recenter</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nb">pop</span> <span class="vg">*quasi-js-current-pos*</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Could not find definition for %s&quot;</span> <span class="nv">text</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">quasi-js-function-go-back</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Go back to where you initiated search from&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="vg">*quasi-js-current-pos*</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nb">pop</span> <span class="vg">*quasi-js-current-pos*</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Nowhere to jump!&quot;</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Add hooks to js2-mode. It will cobbler the default tag-search bindings. Beware.</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="ss">&#39;js2-mode-hook</span>
</span><span class='line'>          <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">local-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-.&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">quasi-js-function-search</span><span class="p">)</span>
</span><span class='line'>            <span class="p">(</span><span class="nv">local-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-,&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">quasi-js-function-go-back</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>It really felt good to have written my first <em>useful</em> elisp code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pooler]]></title>
    <link href="http://quasi.github.io/2013/10/14/pooler/"/>
    <updated>2013-10-14T16:53:00+05:30</updated>
    <id>http://quasi.github.io/2013/10/14/pooler</id>
    <content type="html"><![CDATA[<p>A <em>simple</em>, <em>fast</em> &amp; <em>thread-safe</em> generic pooling library.</p>

<p>Homepage <a href="http://quasilabs.com/pooler/">http://quasilabs.com/pooler/</a></p>

<p>We need pools for items which have heavy cost of creation and which we can reuse. A typical use case is connection pools.</p>

<p>Pool item creation (as required) is automatic on fetch-from pool. Pool-item&rsquo;s are created and destroyed using user supplied funcitons. The pool has a idle timeout after which all the existing pool-item&rsquo;s are destroyed and new ones created (pool-init). The pool has a threshold number of items which it tries to maintain.</p>

<p>Licence : MIT</p>

<p>An Example :</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>CL-USER&gt; (pooler:make-pool :item-maker
</span><span class='line'>                           #'(lambda () (clsql:connect '("127.0.0.1" "quasidb" "quasi" "*****")
</span><span class='line'>                                                       :database-type :mysql
</span><span class='line'>                                                       :if-exists :new))
</span><span class='line'>                           :item-destroyer
</span><span class='line'>                           #'(lambda (item) (clsql:disconnect :database item)))
</span><span class='line'>#S(POOLER::POOL
</span><span class='line'>  :NAME "Default Pool"
</span><span class='line'>  :QUEUE #S(SB-CONCURRENCY:QUEUE
</span><span class='line'>  :HEAD (SB-CONCURRENCY::.DUMMY.)
</span><span class='line'>  :TAIL (SB-CONCURRENCY::.DUMMY.)
</span><span class='line'>  :NAME NIL)
</span><span class='line'>  :LOCK #&lt;SB-THREAD:MUTEX "Pool Lock" (free)&gt;
</span><span class='line'>  :ITEM-MAKER #&lt;FUNCTION (LAMBDA #) {1005C9BFAB}&gt;
</span><span class='line'>  :ITEM-DESTROYER #&lt;FUNCTION (LAMBDA #) {1005CCAAAB}&gt;
</span><span class='line'>  :CAPACITY 40
</span><span class='line'>  :THRESHOLD 2
</span><span class='line'>  :TIMEOUT 300
</span><span class='line'>  :LAST-ACCESS 0
</span><span class='line'>  :CURRENT-SIZE 0
</span><span class='line'>  :TOTAL-USES 0
</span><span class='line'>  :TOTAL-CREATED 0
</span><span class='line'>  :TOTAL-POOL-INITS 0)
</span><span class='line'>CL-USER&gt; (defvar *mysql-pool* *)
</span><span class='line'>CL-USER&gt; (pooler:fetch-from *mysql-pool*)
</span><span class='line'>#&lt;CLSQL-MYSQL:MYSQL-DATABASE 127.0.0.1/quasidb/quasi OPEN {1007571373}&gt;
</span><span class='line'>CL-USER&gt; (pooler:return-to *mysql-pool* *)
</span><span class='line'>2
</span><span class='line'>CL-USER&gt; (pooler:with-pool (db *mysql-pool*) (clsql:query "show tables;" :database db))
</span><span class='line'>(("LOGIN_DATA"))
</span><span class='line'>("Tables_in_quasidb")</span></code></pre></td></tr></table></div></figure>


<p>Has been tested with <a href="http://www.sbcl.org/">SBCL</a>, <a href="http://www.clozure.com/clozurecl.html">CCL</a> &amp; <a href="http://www.cons.org/cmucl/">CMUCL</a> on OSX. Should work on GNU/Linux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nostalgia]]></title>
    <link href="http://quasi.github.io/2012/05/15/nostalgia/"/>
    <updated>2012-05-15T16:57:00+05:30</updated>
    <id>http://quasi.github.io/2012/05/15/nostalgia</id>
    <content type="html"><![CDATA[<p><img src="http://1.bp.blogspot.com/-xWJTvyKhvrQ/T7Ik6N7yNEI/AAAAAAAAARk/b5TztqbnekU/s1600/Screen+Shot+2012-05-15+at+3.10.47+PM.png" title="savastio.c" ></p>

<p>Long ago I used to program <code>C</code>. I loved it. In those days, access to the net was restricted to a 30 minute session once a week. There used to be a &lsquo;superfast&rsquo; 14400 baud US Robotics modem connected to a DOS PC in our collage library. We had to pay for the access. I used to spend those 30 minutes downloading stuff at optimal speeds for later consumption. Either I used to download code snippets from ftp servers and boards or some random Anarchist documents or I used to be downloading images of angels compressed in this magical format called JPEG. These were so much better and smaller than the prevalent GIF files at that time. 16 million colours as opposed to 256 and that too at 1/5 the size !!</p>

<p>I taught myself &lsquo;C&rsquo; programing using <a href="http://www.flipkart.com/let-c-8183331637/p/itmdyueqvbspzywn?pid=9788183331630&amp;_l=gWxQa0snNjHUHKJhnj_y0w--&amp;_r=Z%20C%20hLPvLs7ecz_0PZDaOw--&amp;ref=318165db-bd51-44f6-a294-e91d61c6f5b9">&lsquo;Let us C&rsquo; by Yeshvant Kanhetkar</a>. I also loved the book <a href="http://www.amazon.com/Programming-ANSI-C-Ram-Kumar/dp/0314895639">&lsquo;Programing in ANSI C&rsquo; by Ram Kumar and Rakesh Agarwal</a>. <code>DOS 6.2</code> was an awesome OS to play with. You could do anything you wanted. :) I wrote a couple of interesting TSR&rsquo;s and a system information utility which gave complete information about your hardware. I also wrote a graphical copy program. The inspiration was the hours we spent transferring bootleg material around on floppy disks and waiting for them to get copied not knowing how much % was remaining or which files were written on bad sectors. We could skip files which gave the dreaded <a href="http://en.wikipedia.org/wiki/Abort,_Retry,_Fail%3F">Abort, Retry, Fail?</a> error.</p>

<p>One of the most amazing and inspirational <code>C</code> programs I came across was from the <a href="http://www.ioccc.org/">The International Obfuscated C Code Contest</a> (IOCCC). The program calculated a factorial of any large number. I have let it run for about 30 minutes on my AMD 386 DX 40MHz machine, watching the endless stream of numbers. It is written by one Michael Savastio and the source code is beautiful and can be found <a href="http://www.ioccc.org/1995/savastio.c">here (savastio.c)</a>.</p>

<p>&lsquo;Nuff of the nostalgia :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to solve it]]></title>
    <link href="http://quasi.github.io/2009/08/23/how-to-solve-it/"/>
    <updated>2009-08-23T17:07:00+05:30</updated>
    <id>http://quasi.github.io/2009/08/23/how-to-solve-it</id>
    <content type="html"><![CDATA[<p>One of the books, which Alok Tiwari, a friend of mine from the old time, had suggested I read was &lsquo;How to Solve it&rsquo; by G Polya. I remember being enthralled reading it. It, with Euclid&rsquo;s &lsquo;Elements&rsquo;, are the two books which have had the most impact on my method of thought.</p>

<p>I made a quick set of slides for sharing the salient points of that book with a few friends. The book itself is written in 1945 but still is a very inspiring read.</p>

<p>Wikipedia <a href="http://en.wikipedia.org/wiki/George_P%C3%B3lya">article</a> about him says that he was born in Budapest, Hungary and that he was a professor of mathematics from 1914 to 1940 at ETH Zürich in Switzerland and from 1940 to 1953 at Stanford University carrying on as Stanford Professor Emeritus the rest of his life and career. He wrote four books on the subject: <a href="http://en.wikipedia.org/wiki/How_to_Solve_It">How to Solve It</a>, Mathematical Discovery: On Understanding, Learning, and Teaching Problem Solving; Mathematics and Plausible Reasoning Volume I: Induction and Analogy in Mathematics, and Mathematics and Plausible Reasoning Volume II: Patterns of Plausible Reasoning.</p>

<p><span class='pullquote-right' data-pullquote='&#8220;To conjecture and not to test is the mark of a savage&#8221;'>
Some of his quotes are :</p>

<p>&ldquo;To be a good mathematician, or a good gambler, or good at anything, you must be a good guesser.&rdquo;</p>

<p>&ldquo;A Great discovery solves a great problem but there is a grain of discovery in the solution of any problem. Your problem may be modest; but if it challenges your curiosity and brings into play your inventive faculties, and if you solve it by your own means, you may experience the tension and enjoy the triumph of discovery&rdquo;</p>

<p>&ldquo;To conjecture and not to test is the mark of a savage&rdquo;
</span></p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/1892806 " width="595" height="446" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe>


<p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About paradigms]]></title>
    <link href="http://quasi.github.io/2009/04/15/about-paradigms/"/>
    <updated>2009-04-15T17:31:00+05:30</updated>
    <id>http://quasi.github.io/2009/04/15/about-paradigms</id>
    <content type="html"><![CDATA[<p><img src="http://farm4.static.flickr.com/3564/3416855569_e222d064b4.jpg" title="'Mahavir & Nirvana, Badami'" ></p>

<blockquote><p>A multi-paradigm programming language is a programming language that supports more than one programming paradigm. As Leda designer Tim Budd holds it: The idea of a multiparadigm language is to provide a framework in which programmers can work in a variety of styles, freely intermixing constructs from different paradigms. The design goal of such languages is to allow programmers to use the best tool for a job, admitting that no one paradigm solves all problems in the easiest or most efficient way.</p><footer><strong>Wikipedia</strong> <cite><a href='http://en.wikipedia.org/wiki/Multi-paradigm_programming_language'>Multi Paradigm Programming Language</a></cite></footer></blockquote>


<p>I was just reading this blog post by my friend Sandeep <a href="http://sandeep.shetty.in/2009/04/procedural-programming-is-not-bad-thing.html">Procedural Programming is NOT a Bad Thing!</a> and just thought I had to add some of my own blab &hellip;</p>

<p>I think rather than what features a language or paradigm provides, it is more important to ask oneself how many of these problem solving tricks/ techniques / methods one really knows and can call to aid. Understanding a certain paradigms enough to start fashioning solutions around it is non trivial. Knowing several paradigms should help open a world of different techniques of problem conquest. Any reasonably sized software would have you contemplate deep and hard on the problem space and probable techniques. Most likely, new techniques and paradigms will have to be acquired.</p>

<p>The tools we know of mould the way in which we approach problems. As a C programmer, say, what I can think of are data, locations of data, manipulation of this data in some conditional or iterative way. I would see clear steps and their impact on performance. As a schemer perhaps, I could see abstractions which might help me solve larger problems with less effort at the cost of seeing immediate impact on performance. For example quoting from SICP where the author is explaining about &lsquo;concepts&rsquo; and &lsquo;abstractions&rsquo; &ndash; &ldquo;Similarly, as program designers, we would like our language to be powerful enough so that we can write a procedure that expresses the concept of summation itself rather than only procedures that compute particular sums.&rdquo;</p>

<p>The key to program design and problem solutions is our ability to see these &lsquo;abstractions&rsquo; and hence reduce problem space and complexity repeatedly till we have managed to &lsquo;solve&rsquo; it sufficiently.</p>

<p>Certain vagueness or misdirections occurs when people give (or understand) only part of the reasons why they propound a particular paradigm strongly. For example, the Java people build a engineering platform which could scale to handle large complexity and resources and also help management of the whole thing. Large companies with extremely large code bases and with large programmer base have, as an element of the problem space, issues regarding code integrity, collaborative maximal exclusion coding. The issues and hence the design patterns which addresses these issues are specific to such systems. A Linus working on GIT is a different proposition. So Java is not necessarily a very elegant medium of expression of ideas but it is an excellent platform for the management of larger code bases and systems.</p>

<p>One has to choose a platform which will give him access to all the paradigms which his problem space may need to reach a good solution. So the key to a good platform for the creative types and people not encumbered with people problems, turns out to be the flexibility of the platform in providing the programmer a free space where a solution could be designed which merits the problem without being restrained or constrained by any particular paradigm or method of work. Ruby and Python are becoming more popular due to the flexibility and the expressiveness they provide, which I will call the elegance factor, which earlier was underrated.</p>

<p>Me, I program in Common Lisp. It is Nirvana for the programmer. The path to Niravana is always tough. But what you can do with such tools is what makes work pleasure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Hash Functions]]></title>
    <link href="http://quasi.github.io/2009/03/21/hash-functions/"/>
    <updated>2009-03-21T14:20:00+05:30</updated>
    <id>http://quasi.github.io/2009/03/21/hash-functions</id>
    <content type="html"><![CDATA[<p>Here are some common hash functions in C I found online <a href="http://www.cse.yorku.ca/~oz/hash.html">here</a> and <a href="http://www.partow.net/programming/hashfunctions/index.html">here</a>. I have done the menial task of translating them to Common Lisp.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function by Dan Bernstein</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DJB</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">5381</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>     <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                        <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                        <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">5</span><span class="p">))</span> <span class="nv">hash</span><span class="p">))</span>
</span><span class='line'>                           <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">))))</span>
</span><span class='line'>     <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function by Dan Bernstein</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DJB2</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">5381</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>       <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">hash</span> <span class="mi">33</span><span class="p">))))</span>
</span><span class='line'>       <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function from GAWK, a variation from the verwion from SDBM</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-SDBM</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>       <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">6</span><span class="p">))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>                             <span class="p">(</span><span class="nb">-</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'>       <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; An algorithm proposed by Donald E. Knuth in The Art Of Computer Programming Volume 3</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DEK</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'>     <span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">str</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>       <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                          <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>                                  <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'>                                          <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">-27</span><span class="p">)))))</span>
</span><span class='line'>       <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
