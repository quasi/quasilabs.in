<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | quasiTech]]></title>
  <link href="http://quasi.github.io/categories/programming/atom.xml" rel="self"/>
  <link href="http://quasi.github.io/"/>
  <updated>2014-02-05T19:27:34+05:30</updated>
  <id>http://quasi.github.io/</id>
  <author>
    <name><![CDATA[Abhijit Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Starting with Common Lisp]]></title>
    <link href="http://quasi.github.io/2014/02/05/starting-with-common-lisp/"/>
    <updated>2014-02-05T15:50:00+05:30</updated>
    <id>http://quasi.github.io/2014/02/05/starting-with-common-lisp</id>
    <content type="html"><![CDATA[<p>Learning a new programming language requires you to interact with its runtime. But the bare bones runtime is usually just that &ndash; bare. It generally is an unpleasant task to interact with directly. This is nowhere more true then when learning to program in Lisp. But the good news is that the tools of the Lisp environment are evolved and provide a lot of support to make interaction less unpleasent. It is therefore imperative that we use these tools and setup an ideal environment before we start with the lessons.</p>

<p>Today we will setup, <em>from scratch</em>, a <em>Common Lisp</em> development environment. This will include an editor, an interactive development environment, a structured editing mode and an implementation of Common Lisp.</p>

<p><em>Note : please change the paths in the examples to reflect your system</em></p>

<h4>Common Lisp</h4>

<p>We will need an implemntation of Common Lisp. There are <a href="http://cliki.net/Common%20Lisp%20implementation">several</a> free and commercial ones available. We will use the excellent public domain <a href="http://www.sbcl.org">Steel Bank Common Lisp (SBCL)</a> for this tutorial.</p>

<blockquote><p>Steel Bank Common Lisp (SBCL) is a high performance Common Lisp compiler. It is open source / free software, with a permissive license. In addition to the compiler and runtime system for ANSI Common Lisp, it provides an interactive environment including a debugger, a statistical profiler, a code coverage tool, and many other extensions.</p></blockquote>

<p>Let us select the Darwin (Mac OS X) AMD64 port from the <a href="http://www.sbcl.org/platform-table.html">downloads</a> section and download (&lt; 10 Mb).</p>

<p><code>
wget http://prdownloads.sourceforge.net/sbcl/sbcl-1.1.8-x86-64-darwin-binary.tar.bz2
</code>
Extract the archive
<code>
tar xjvf sbcl-1.1.8-x86-64-darwin-binary.tar.bz2
</code>
Change to the extracted folder
<code>
cd sbcl-1.1.8-x86-64-darwin
</code>
The <em>INSTALL</em> file details the installation instructions. I prefer to install in my home folder. Create a folder to contain all the <em>SBCL</em> files. Run the install script specifying the installation folder of our choice.
```
mkdir /Users/me/sbcl</p>

<p>INSTALL_ROOT=/Users/me/sbcl sh install.sh
<code>``
This will install all the files into</code>/Users/me/sbcl<code>. *SBCL* contains an executable and a core file. The executable - usually named</code>sbcl<code>- looks for an environment variable</code>SBCL_HOME` to locate the core file. We also need to set the locale. I have a shell script in my local bin which does all this.</p>

<p>Create a file <code>~/bin/sbcl</code> and add following to it :
```</p>

<h1>!/bin/sh</h1>

<p>LC_CTYPE=en_US.UTF-8
export LC_CTYPE
export SBCL_HOME=/Users/me/sbcl/lib/sbcl/</p>

<p>/Users/me/sbcl/bin/sbcl $*
<code>
Make this file executable
</code>
chmod +x ~/bin/sbcl
<code>
now typing `sbcl` into your shell prompt should start up *SBCL* and show something like below
</code>
This is SBCL 1.1.10, an implementation of ANSI Common Lisp.
More information about SBCL is available at <a href="http://www.sbcl.org/">http://www.sbcl.org/</a>.</p>

<p>SBCL is free software, provided as is, with absolutely no warranty.
It is mostly in the public domain; some portions are provided under
BSD-style licenses.  See the CREDITS and COPYING files in the
distribution for more information.
*
<code>
You can type s-expressions at the `*` prompt and the lisp will evaluate and return you an answer. For example.
</code>
* (+ 2 3)</p>

<p>5
*
```
Congrats !! We have an installed and running <em>Common Lisp</em> ! Now let&rsquo;s move forward.</p>

<h4>Quicklisp !</h4>

<p><a href="http://www.quicklisp.org/beta/">http://www.quicklisp.org/beta/</a> by Zach Beane</p>

<blockquote><p>Quicklisp is a library manager for Common Lisp. It works with your existing Common Lisp implementation to download, install, and load any of over 900 libraries with a few simple commands.</p></blockquote>

<p>Read through the installation instructions from that site. In short we will have to :</p>

<p><code>
$ curl -O http://beta.quicklisp.org/quicklisp.lisp
</code>
Start <em>SBCL</em> with this file :
<code>
sbcl --load quicklisp.lisp
</code>
At the prompt follow the instructions &ndash; type following :
<code>
* (quicklisp-quickstart:install)
</code>
This will download and install the latest <em>quicklisp</em> software. To add the <em>quicklisp</em> to the <em>SBCL</em> startup file :
<code>
(ql:add-to-init-file)
</code>
Now everytime you start <em>SBCL</em> it will load <em>quicklisp</em> automatically. yey!</p>

<p>To install a library you simply have to :
<code>
* (ql:quickload "libraryname")
</code></p>

<p>Now the we need to install a <em>very</em> important package called <a href="http://www.common-lisp.net/project/slime/">SLIME</a>. This is the software which gives us our interactive development environment <em>(like no other)</em> !</p>

<p><code>
(ql:quickload "quicklisp-slime-helper")
</code>
Note the instructions which follow this &ndash; you will need to use them for your editor configuration. Next topic.</p>

<h4>Editor</h4>

<blockquote><p>GNU Emacs is an extensible, customizable text editorâ€”and more. At its core is an interpreter for Emacs Lisp, a dialect of the Lisp programming language with extensions to support text editing.</p></blockquote>

<p>Emacs is the editor of choice for Lisp programmers. It provides fantastic support for programming in various lisps. There are <a href="http://www.emacswiki.org/emacs/CategoryPorts">a lot of</a> flavours available for a lot of different systems. On GNU/Linux systems, the latest emacs can be installed using the system package manager. I use <a href="http://aquamacs.org">Aquamacs</a> on Mac OS X. Please install your Emacs before moving to the next step.</p>

<h4>Configuring Emacs</h4>

<p>Create a <code>.emacs</code> file in your home. This file is the Emacs startup file and can contain any valid elisp. All options can be configured here. By convention a folder <code>~/.emacs.d</code> is usually used for any misc elisp files, packages etc. which we may need to install manually.</p>

<p>Emacs comes with a package manager. This can automagically install packages and their dependencies. I like all the installed packages to reside inside a folder <code>.emacs.d/elpa</code>. Create this folder.  To set it up, add the following to your .emacs. (note : <code>;</code> start a comment in lisp source files)
```
(require &lsquo;package)
(add-to-list 'package-archives</p>

<pre><code>         '("melpa" . "http://melpa.milkbox.net/packages/") t)
</code></pre>

<p>(setq package-user-dir &ldquo;/Users/me/.emacs.d/elpa/&rdquo;) ;; change the path.
(package-initialize)
```</p>

<p>Now <code>M-x package-install &lt;package-name&gt;</code> will download and install the package.</p>

<h5>SLIME</h5>

<blockquote><p>SLIME is a Emacs mode for Common Lisp development.</p></blockquote>

<p>Configuring <em>SLIME</em> : Add the following to your .emacs
```
(setq inferior-lisp-program &ldquo;~/bin/sbcl&rdquo;)
(load (expand-file-name &ldquo;~/quicklisp/slime-helper.el&rdquo;))</p>

<p>(setq slime-lisp-implementations</p>

<pre><code>       '((sbcl ("~/bin/sbcl") :coding-system utf-8-unix)))
</code></pre>

<p>(set-language-environment &ldquo;UTF-8&rdquo;)
(setq slime-net-coding-system &lsquo;utf-8-unix)</p>

<p>```
This basically tells Emacs where to find the lisp (called <em>inferior-lisp</em>) program. Then we load the <em>slime-helper</em> which <em>quicklisp</em> provides.</p>

<p><code>M-x eval-buffer</code> will read your new changes. <code>M-x slime</code> should start <em>SLIME</em> and present you with a nice <em>REPL</em>. At the <em>REPL</em> <code>,q</code> will quit <em>SLIME</em>.</p>

<h5>PAREDIT</h5>

<blockquote><p>ParEdit (paredit.el) is a minor mode for performing structured editing of S-expression data.</p></blockquote>

<p><code>M-x package-install paredit</code> should download and install it.</p>

<p>To setup <em>paredit</em> and to get it to work with <em>SLIME</em>, add following to <code>.emacs</code>.
<code>
;; Paredit customizations
(autoload 'paredit-mode "paredit"
  "Minor mode for pseudo-structurally editing Lisp code."
  t)
(add-hook 'slime-mode-hook (lambda () (paredit-mode +1)))
(add-hook 'slime-repl-mode-hook (lambda () (paredit-mode +1)))
(require 'paredit)
</code></p>

<h4>Almost there</h4>

<p>At this point of time we have an installed and running Common Lisp implementation, an advanced editor, an interactive development environment &amp; a structured editing extention for the editor. This is the place to spend some time to see how all of these work.</p>

<ul>
<li>Inside Emacs <code>C-h t</code> starts the inbuilt interactive tutorial</li>
<li>Emacs introductory videos <a href="http://emacsrocks.com/">http://emacsrocks.com/</a></li>
<li><a href="http://common-lisp.net/project/movies/movies/slime.mov">SLIME video</a> &ndash; This is an excellent and instructional watch. Marco Baringer shows how it is done. Consider this also as informal introduction to SLIME</li>
<li>SLIME <a href="http://www.common-lisp.net/project/slime/doc/html/">manual</a></li>
<li>Paredit Author&rsquo;s <a href="http://mumble.net/~campbell/emacs/paredit.html">page</a></li>
<li>Paredit Emacs Wiki <a href="http://www.emacswiki.org/emacs/ParEdit">page</a></li>
</ul>


<h4>Epilogue : Learning Common Lisp</h4>

<p>Now that we have got all the boring setup stuff out of the way, let us <em>start</em> with Common Lisp !! <a href="http://www.gigamonkeys.com/book/">Practical Common Lisp</a> is an excellent modern introduction and you can start here.</p>

<p>I am assuming that as you have come this far, you <em>are</em> interested in learning. I would suggest that you do exactly so &ndash; <em>learn</em>. Give it some time and thought before you come to any conclusions. This is very important for people who are coming from a non-lisp programming background. The lisp way is different. It may take time for you to <em>get</em> it. Concentrate on the simpler language aspects and try to solve challenging programming problems. Stay away from the temptation of exploring libraries and doing some <em>&lsquo;real&rsquo;</em> work at this point. You will only get distracted with unnecessary detail.</p>

<p>Best Luck on your journey &ndash; You will not regret it.</p>

<p><em>May the force be with you.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nostalgia]]></title>
    <link href="http://quasi.github.io/2012/05/15/nostalgia/"/>
    <updated>2012-05-15T16:57:00+05:30</updated>
    <id>http://quasi.github.io/2012/05/15/nostalgia</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://1.bp.blogspot.com/-xWJTvyKhvrQ/T7Ik6N7yNEI/AAAAAAAAARk/b5TztqbnekU/s1600/Screen+Shot+2012-05-15+at+3.10.47+PM.png">http://1.bp.blogspot.com/-xWJTvyKhvrQ/T7Ik6N7yNEI/AAAAAAAAARk/b5TztqbnekU/s1600/Screen+Shot+2012-05-15+at+3.10.47+PM.png</a>" title="savastio.c" ></p>

<p>Long ago I used to program <code>C</code>. I loved it. In those days, access to the net was restricted to a 30 minute session once a week. There used to be a &lsquo;superfast&rsquo; 14400 baud US Robotics modem connected to a DOS PC in our collage library. We had to pay for the access. I used to spend those 30 minutes downloading stuff at optimal speeds for later consumption. Either I used to download code snippets from ftp servers and boards or some random Anarchist documents or I used to be downloading images of angels compressed in this magical format called JPEG. These were so much better and smaller than the prevalent GIF files at that time. 16 million colours as opposed to 256 and that too at 1/5 the size !!</p>

<p>I taught myself &lsquo;C&rsquo; programing using <a href="http://www.flipkart.com/let-c-8183331637/p/itmdyueqvbspzywn?pid=9788183331630&amp;_l=gWxQa0snNjHUHKJhnj_y0w--&amp;_r=Z%20C%20hLPvLs7ecz_0PZDaOw--&amp;ref=318165db-bd51-44f6-a294-e91d61c6f5b9">&lsquo;Let us C&rsquo; by Yeshvant Kanhetkar</a>. I also loved the book <a href="http://www.amazon.com/Programming-ANSI-C-Ram-Kumar/dp/0314895639">&lsquo;Programing in ANSI C&rsquo; by Ram Kumar and Rakesh Agarwal</a>. <code>DOS 6.2</code> was an awesome OS to play with. You could do anything you wanted. :) I wrote a couple of interesting TSR&rsquo;s and a system information utility which gave complete information about your hardware. I also wrote a graphical copy program. The inspiration was the hours we spent transferring bootleg material around on floppy disks and waiting for them to get copied not knowing how much % was remaining or which files were written on bad sectors. We could skip files which gave the dreaded <a href="http://en.wikipedia.org/wiki/Abort,_Retry,_Fail%3F">Abort, Retry, Fail?</a> error.</p>

<p>One of the most amazing and inspirational <code>C</code> programs I came across was from the <a href="http://www.ioccc.org/">The International Obfuscated C Code Contest</a> (IOCCC). The program calculated a factorial of any large number. I have let it run for about 30 minutes on my AMD 386 DX 40MHz machine, watching the endless stream of numbers. It is written by one Michael Savastio and the source code is beautiful and can be found <a href="http://www.ioccc.org/1995/savastio.c">here (savastio.c)</a>.</p>

<p>&lsquo;Nuff of the nostalgia :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[About paradigms]]></title>
    <link href="http://quasi.github.io/2009/04/15/about-paradigms/"/>
    <updated>2009-04-15T17:31:00+05:30</updated>
    <id>http://quasi.github.io/2009/04/15/about-paradigms</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://farm4.static.flickr.com/3564/3416855569_e222d064b4.jpg">http://farm4.static.flickr.com/3564/3416855569_e222d064b4.jpg</a>" title="&lsquo;Mahavir &amp; Nirvana, Badami&rsquo;" ></p>

<p><blockquote><p>A multi-paradigm programming language is a programming language that supports more than one programming paradigm. As Leda designer Tim Budd holds it: The idea of a multiparadigm language is to provide a framework in which programmers can work in a variety of styles, freely intermixing constructs from different paradigms. The design goal of such languages is to allow programmers to use the best tool for a job, admitting that no one paradigm solves all problems in the easiest or most efficient way.</p><footer><strong>Wikipedia <a href="http://en.wikipedia.org/wiki/Multi-paradigm_programming_language">http://en.wikipedia.org/wiki/Multi-paradigm_programming_language</a> Multi Paradigm Programming Language</strong></footer></blockquote></p>

<p>I was just reading this blog post by my friend Sandeep <a href="http://sandeep.shetty.in/2009/04/procedural-programming-is-not-bad-thing.html">Procedural Programming is NOT a Bad Thing!</a> and just thought I had to add some of my own blab &hellip;</p>

<p>I think rather than what features a language or paradigm provides, it is more important to ask oneself how many of these problem solving tricks/ techniques / methods one really knows and can call to aid. Understanding a certain paradigms enough to start fashioning solutions around it is non trivial. Knowing several paradigms should help open a world of different techniques of problem conquest. Any reasonably sized software would have you contemplate deep and hard on the problem space and probable techniques. Most likely, new techniques and paradigms will have to be acquired.</p>

<p>The tools we know of mould the way in which we approach problems. As a C programmer, say, what I can think of are data, locations of data, manipulation of this data in some conditional or iterative way. I would see clear steps and their impact on performance. As a schemer perhaps, I could see abstractions which might help me solve larger problems with less effort at the cost of seeing immediate impact on performance. For example quoting from SICP where the author is explaining about &lsquo;concepts&rsquo; and &lsquo;abstractions&rsquo; &ndash; &ldquo;Similarly, as program designers, we would like our language to be powerful enough so that we can write a procedure that expresses the concept of summation itself rather than only procedures that compute particular sums.&rdquo;</p>

<p>The key to program design and problem solutions is our ability to see these &lsquo;abstractions&rsquo; and hence reduce problem space and complexity repeatedly till we have managed to &lsquo;solve&rsquo; it sufficiently.</p>

<p>Certain vagueness or misdirections occurs when people give (or understand) only part of the reasons why they propound a particular paradigm strongly. For example, the Java people build a engineering platform which could scale to handle large complexity and resources and also help management of the whole thing. Large companies with extremely large code bases and with large programmer base have, as an element of the problem space, issues regarding code integrity, collaborative maximal exclusion coding. The issues and hence the design patterns which addresses these issues are specific to such systems. A Linus working on GIT is a different proposition. So Java is not necessarily a very elegant medium of expression of ideas but it is an excellent platform for the management of larger code bases and systems.</p>

<p>One has to choose a platform which will give him access to all the paradigms which his problem space may need to reach a good solution. So the key to a good platform for the creative types and people not encumbered with people problems, turns out to be the flexibility of the platform in providing the programmer a free space where a solution could be designed which merits the problem without being restrained or constrained by any particular paradigm or method of work. Ruby and Python are becoming more popular due to the flexibility and the expressiveness they provide, which I will call the elegance factor, which earlier was underrated.</p>

<p>Me, I program in Common Lisp. It is Nirvana for the programmer. The path to Niravana is always tough. But what you can do with such tools is what makes work pleasure.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Hash Functions]]></title>
    <link href="http://quasi.github.io/2009/03/21/hash-functions/"/>
    <updated>2009-03-21T14:20:00+05:30</updated>
    <id>http://quasi.github.io/2009/03/21/hash-functions</id>
    <content type="html"><![CDATA[<p>Here are some common hash functions in C I found online <a href="http://www.cse.yorku.ca/~oz/hash.html">here</a> and <a href="http://www.partow.net/programming/hashfunctions/index.html">here</a>. I have done the menial task of translating them to Common Lisp.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function by Dan Bernstein</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DJB</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">5381</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'> <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">5</span><span class="p">))</span> <span class="nv">hash</span><span class="p">))</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">))))</span>
</span><span class='line'> <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function by Dan Bernstein</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DJB2</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">5381</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>   <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">hash</span> <span class="mi">33</span><span class="p">))))</span>
</span><span class='line'>   <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function from GAWK, a variation from the verwion from SDBM</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-SDBM</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>       <span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">0</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>   <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">6</span><span class="p">))</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">-</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'>   <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; An algorithm proposed by Donald E. Knuth in The Art Of Computer Programming Volume 3</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DEK</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>   <span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">str</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>   <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>                              <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'>                                      <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">-27</span><span class="p">)))))</span>
</span><span class='line'>   <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
