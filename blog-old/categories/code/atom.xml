<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: code | quasiTech]]></title>
  <link href="http://quasi.github.io/categories/code/atom.xml" rel="self"/>
  <link href="http://quasi.github.io/"/>
  <updated>2014-02-05T19:27:34+05:30</updated>
  <id>http://quasi.github.io/</id>
  <author>
    <name><![CDATA[Abhijit Rao]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Emacs and JS: Finding function definitions]]></title>
    <link href="http://quasi.github.io/2014/01/06/emacs-and-js-finding-function-definitions/"/>
    <updated>2014-01-06T17:31:00+05:30</updated>
    <id>http://quasi.github.io/2014/01/06/emacs-and-js-finding-function-definitions</id>
    <content type="html"><![CDATA[<p>I started doing Javascript recently. The <code>js2-mode</code> is excellent. But I am spoilt by <code>SLIME</code> :). One of the things I most missed from there was to be able to lookup function definitions with <code>M-.</code> and to get back with <code>M-,</code>. I had been pair programming with a team-mate and editing a 1000 line file and in his vanilla &lsquo;Sublime&rsquo; editor and it was a royal pain scrolling all over the place looking for function definitions.  So I decided to try my hand at some elisp. This was the first time but I really felt the need.</p>

<p>This is pretty simple really :</p>

<ul>
<li>Get the word at point</li>
<li>Prepend &ldquo;function &rdquo; to it</li>
<li>Save current location on a stack to getting back</li>
<li>Go to top of buffer</li>
<li>Do a forward search with our search string</li>
<li>If successful center line</li>
<li>Else do nothing and show message.</li>
</ul>


<p>Another function, bound to <code>M-,</code> pops a position off the stack and goes to it.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Find JS function definition in your current buffer (and go back).&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nb">defvar</span> <span class="nv">&lt;em&gt;quasi-js-current-pos&lt;/em&gt;</span> <span class="no">nil</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nb">defun</span> <span class="nv">quasi-js-function-search</span> <span class="p">()</span>
</span><span class='line'>  <span class="nv">&amp;ldquo</span><span class="c1">;Search for JS function definations. In a rather dumb way, but works, albeit</span>
</span><span class='line'><span class="nv">only</span> <span class="nv">for</span> <span class="nv">current</span> <span class="nv">buffer.</span> <span class="nv">Works</span> <span class="nv">recurcively</span> <span class="nv">too</span> <span class="err">:</span><span class="p">)</span><span class="nv">&amp;rdquo</span><span class="c1">;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">text</span> <span class="p">(</span><span class="nv">thing-at-point</span> <span class="nv">&amp;lsquo</span><span class="c1">;word)))&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">push</span> <span class="p">(</span><span class="nv">point</span><span class="p">)</span> <span class="vg">*quasi-js-current-pos*</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">if</span> <span class="p">(</span><span class="nv">search-forward</span> <span class="p">(</span><span class="nv">concat</span> <span class="s">&quot;function &quot;</span> <span class="nv">text</span><span class="p">)</span> <span class="no">nil</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">recenter</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nb">pop</span> <span class="vg">*quasi-js-current-pos*</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Could not find definition for %s&quot;</span> <span class="nv">text</span><span class="p">)))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="p">(</span><span class="nb">defun</span> <span class="nv">quasi-js-function-go-back</span> <span class="p">()</span>
</span><span class='line'>  <span class="nv">&amp;ldquo</span><span class="c1">;Go back to where you initiated search from&amp;rdquo;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">interactive</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if</span> <span class="nv">&lt;em&gt;quasi-js-current-pos&lt;/em&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>  <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nb">pop</span> <span class="vg">*quasi-js-current-pos*</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nv">message</span> <span class="s">&quot;Nowhere to jump!&quot;</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span><span class="c1">;; Add hooks to js2-mode. It will cobbler the default tag-search bindings. Beware.</span>
</span><span class='line'><span class="p">(</span><span class="nv">add-hook</span> <span class="nv">&amp;lsquo</span><span class="c1">;js2-mode-hook&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>      <span class="p">(</span><span class="k">lambda</span> <span class="p">()</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">local-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-.&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">quasi-js-function-search</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">local-set-key</span> <span class="p">(</span><span class="nv">kbd</span> <span class="s">&quot;M-,&quot;</span><span class="p">)</span> <span class="nf">#&#39;</span><span class="nv">quasi-js-function-go-back</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>It really felt good to have written my first <em>useful</em> elisp code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pooler]]></title>
    <link href="http://quasi.github.io/2013/10/14/pooler/"/>
    <updated>2013-10-14T16:53:00+05:30</updated>
    <id>http://quasi.github.io/2013/10/14/pooler</id>
    <content type="html"><![CDATA[<p>A <em>simple</em>, <em>fast</em> &amp; <em>thread-safe</em> generic pooling library.</p>

<p>Homepage <a href="http://quasilabs.com/pooler/">http://quasilabs.com/pooler/</a></p>

<p>We need pools for items which have heavy cost of creation and which we can reuse. A typical use case is connection pools.</p>

<p>Pool item creation (as required) is automatic on fetch-from pool. Pool-item&rsquo;s are created and destroyed using user supplied funcitons. The pool has a idle timeout after which all the existing pool-item&rsquo;s are destroyed and new ones created (pool-init). The pool has a threshold number of items which it tries to maintain.</p>

<p>Licence : MIT</p>

<p>An Example :
```
CL-USER> (pooler:make-pool :item-maker</p>

<pre><code>                       #'(lambda () (clsql:connect '("127.0.0.1" "quasidb" "quasi" "*****")
                                                   :database-type :mysql
                                                   :if-exists :new))
                       :item-destroyer
                       #'(lambda (item) (clsql:disconnect :database item)))
</code></pre>

<h1>S(POOLER::POOL</h1>

<p>  :NAME &ldquo;Default Pool&rdquo;
  :QUEUE #S(SB-CONCURRENCY:QUEUE
  :HEAD (SB-CONCURRENCY::.DUMMY.)
  :TAIL (SB-CONCURRENCY::.DUMMY.)
  :NAME NIL)
  :LOCK #&lt;SB-THREAD:MUTEX &ldquo;Pool Lock&rdquo; (free)>
  :ITEM-MAKER #<FUNCTION (LAMBDA #) {1005C9BFAB}>
  :ITEM-DESTROYER #<FUNCTION (LAMBDA #) {1005CCAAAB}>
  :CAPACITY 40
  :THRESHOLD 2
  :TIMEOUT 300
  :LAST-ACCESS 0
  :CURRENT-SIZE 0
  :TOTAL-USES 0
  :TOTAL-CREATED 0
  :TOTAL-POOL-INITS 0)
CL-USER> (defvar <em>mysql-pool</em> <em>)
CL-USER> (pooler:fetch-from </em>mysql-pool*)</p>

<h1>&lt;CLSQL-MYSQL:MYSQL-DATABASE 127.0.0.1/quasidb/quasi OPEN {1007571373}></h1>

<p>CL-USER> (pooler:return-to <em>mysql-pool</em> <em>)
2
CL-USER> (pooler:with-pool (db </em>mysql-pool*) (clsql:query &ldquo;show tables;&rdquo; :database db))
((&ldquo;LOGIN_DATA&rdquo;))
(&ldquo;Tables_in_quasidb&rdquo;)
```</p>

<p>Has been tested with <a href="http://www.sbcl.org/">SBCL</a>, <a href="http://www.clozure.com/clozurecl.html">CCL</a> &amp; <a href="http://www.cons.org/cmucl/">CMUCL</a> on OSX. Should work on GNU/Linux.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nostalgia]]></title>
    <link href="http://quasi.github.io/2012/05/15/nostalgia/"/>
    <updated>2012-05-15T16:57:00+05:30</updated>
    <id>http://quasi.github.io/2012/05/15/nostalgia</id>
    <content type="html"><![CDATA[<p><img class="<a" src="href="http://1.bp.blogspot.com/-xWJTvyKhvrQ/T7Ik6N7yNEI/AAAAAAAAARk/b5TztqbnekU/s1600/Screen+Shot+2012-05-15+at+3.10.47+PM.png">http://1.bp.blogspot.com/-xWJTvyKhvrQ/T7Ik6N7yNEI/AAAAAAAAARk/b5TztqbnekU/s1600/Screen+Shot+2012-05-15+at+3.10.47+PM.png</a>" title="savastio.c" ></p>

<p>Long ago I used to program <code>C</code>. I loved it. In those days, access to the net was restricted to a 30 minute session once a week. There used to be a &lsquo;superfast&rsquo; 14400 baud US Robotics modem connected to a DOS PC in our collage library. We had to pay for the access. I used to spend those 30 minutes downloading stuff at optimal speeds for later consumption. Either I used to download code snippets from ftp servers and boards or some random Anarchist documents or I used to be downloading images of angels compressed in this magical format called JPEG. These were so much better and smaller than the prevalent GIF files at that time. 16 million colours as opposed to 256 and that too at 1/5 the size !!</p>

<p>I taught myself &lsquo;C&rsquo; programing using <a href="http://www.flipkart.com/let-c-8183331637/p/itmdyueqvbspzywn?pid=9788183331630&amp;_l=gWxQa0snNjHUHKJhnj_y0w--&amp;_r=Z%20C%20hLPvLs7ecz_0PZDaOw--&amp;ref=318165db-bd51-44f6-a294-e91d61c6f5b9">&lsquo;Let us C&rsquo; by Yeshvant Kanhetkar</a>. I also loved the book <a href="http://www.amazon.com/Programming-ANSI-C-Ram-Kumar/dp/0314895639">&lsquo;Programing in ANSI C&rsquo; by Ram Kumar and Rakesh Agarwal</a>. <code>DOS 6.2</code> was an awesome OS to play with. You could do anything you wanted. :) I wrote a couple of interesting TSR&rsquo;s and a system information utility which gave complete information about your hardware. I also wrote a graphical copy program. The inspiration was the hours we spent transferring bootleg material around on floppy disks and waiting for them to get copied not knowing how much % was remaining or which files were written on bad sectors. We could skip files which gave the dreaded <a href="http://en.wikipedia.org/wiki/Abort,_Retry,_Fail%3F">Abort, Retry, Fail?</a> error.</p>

<p>One of the most amazing and inspirational <code>C</code> programs I came across was from the <a href="http://www.ioccc.org/">The International Obfuscated C Code Contest</a> (IOCCC). The program calculated a factorial of any large number. I have let it run for about 30 minutes on my AMD 386 DX 40MHz machine, watching the endless stream of numbers. It is written by one Michael Savastio and the source code is beautiful and can be found <a href="http://www.ioccc.org/1995/savastio.c">here (savastio.c)</a>.</p>

<p>&lsquo;Nuff of the nostalgia :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Hash Functions]]></title>
    <link href="http://quasi.github.io/2009/03/21/hash-functions/"/>
    <updated>2009-03-21T14:20:00+05:30</updated>
    <id>http://quasi.github.io/2009/03/21/hash-functions</id>
    <content type="html"><![CDATA[<p>Here are some common hash functions in C I found online <a href="http://www.cse.yorku.ca/~oz/hash.html">here</a> and <a href="http://www.partow.net/programming/hashfunctions/index.html">here</a>. I have done the menial task of translating them to Common Lisp.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function by Dan Bernstein</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DJB</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">5381</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'> <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                            <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                                    <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">5</span><span class="p">))</span> <span class="nv">hash</span><span class="p">))</span>
</span><span class='line'>                       <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">))))</span>
</span><span class='line'> <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function by Dan Bernstein</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DJB2</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">5381</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>   <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span> <span class="p">(</span><span class="nb">*</span> <span class="nv">hash</span> <span class="mi">33</span><span class="p">))))</span>
</span><span class='line'>   <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; Hash Function from GAWK, a variation from the verwion from SDBM</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-SDBM</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>       <span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'>       <span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="mi">0</span><span class="p">))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>   <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">+</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">6</span><span class="p">))</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">16</span><span class="p">))</span>
</span><span class='line'>                         <span class="p">(</span><span class="nb">-</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'>   <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='common-lisp'><span class='line'><span class="c1">;;; An algorithm proposed by Donald E. Knuth in The Art Of Computer Programming Volume 3</span>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">hash-DEK</span> <span class="p">(</span><span class="nv">str</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">declare</span> <span class="p">(</span><span class="k">type</span> <span class="kt">simple-string</span> <span class="nv">str</span><span class="p">)</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span>   <span class="p">(</span><span class="k">type</span> <span class="p">(</span><span class="kt">unsigned-byte</span> <span class="mi">32</span><span class="p">)</span> <span class="nv">hash</span><span class="p">)</span>
</span><span class='line'>   <span class="p">(</span><span class="k">optimize</span> <span class="nv">speed</span> <span class="p">(</span><span class="nv">debug</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>  <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">hash</span> <span class="p">(</span><span class="nb">length</span> <span class="nv">str</span><span class="p">)))</span><span class="nv">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;pre&gt;&lt;code&gt;</span><span class="p">(</span><span class="nb">loop</span> <span class="nv">for</span> <span class="nv">x</span> <span class="nv">across</span> <span class="nv">str</span>
</span><span class='line'>   <span class="nb">do</span> <span class="p">(</span><span class="nb">setf</span> <span class="nv">hash</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">char-int</span> <span class="nv">x</span><span class="p">)</span>
</span><span class='line'>                              <span class="p">(</span><span class="nb">logxor</span> <span class="p">(</span><span class="nb">ldb</span> <span class="p">(</span><span class="nb">byte</span> <span class="mi">32</span> <span class="mi">0</span><span class="p">)</span> <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">5</span><span class="p">))</span>
</span><span class='line'>                                      <span class="p">(</span><span class="nb">ash</span> <span class="nv">hash</span> <span class="mi">-27</span><span class="p">)))))</span>
</span><span class='line'>   <span class="nv">finally</span> <span class="p">(</span><span class="nb">return</span> <span class="nv">hash</span><span class="p">))))</span>
</span><span class='line'><span class="nv">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">&lt;p&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
